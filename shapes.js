function getWireframe() {
	var arr = new Array();
	//bottom
	arr[0] = [
		3, -5, -3,
		3, -5, 3,
		3, -5, 3,
		-3, -5, 3,
		-3, -5, 3,
		-3, -5, -3,
		-3, -5, -3,
		3, -5, -3,
	]
	//top
	arr[1] = [
		3, 5, -3,
		3, 5, 3,
		3, 5, 3,
		-3, 5, 3,
		-3, 5, 3,
		-3, 5, -3,
		-3, 5, -3,
		3, 5, -3,
	]
	//front
	arr[2] = [
		-3, -5, 3,
		-3, 5, 3,
		-3, 5, 3,
		3, 5, 3,
		3, 5, 3,
		3, -5, 3,
		3, -5, 3,
		-3, -5, 3,
	]
	//back
	arr[3] = [
		-3, -5, -3,
		-3, 5, -3,
		-3, 5, -3,
		3, 5, -3,
		3, 5, -3,
		3, -5, -3,
		3, -5, -3,
		-3, -5, -3
	]
	//right
	arr[4] = [
		3, 5, -3,
		3, -5, -3,
		3, -5, -3,
		3, -5, 3,
		3, -5, 3,
		3, 5, 3,
		3, 5, 3,
		3, 5, -3,
	]
	//left
	arr[5] = [
		-3, 5, 3,
		-3, -5, 3,
		-3, -5, 3,
		-3, -5, -3,
		-3, -5, -3,
		-3, 5, -3,
		-3, 5, -3,
		-3, 5, 3,
	]
	return arr;
}

function wireframe() {
	var arr = new Array();
	var help = new Array();
	//bottom
	for (var x=-3; x<0; x++) {
		arr = arr.concat([x, -5, -3]);
		arr = arr.concat([x, -5, 3]);
		arr = arr.concat([-x, -5, -3]);
		arr = arr.concat([-x, -5, 3]);
	}
	for (var z=-3; z<0; z++) {
		arr = arr.concat([-3, -5, z]);
		arr = arr.concat([3, -5, z]);
		arr = arr.concat([-3, -5, -z]);
		arr = arr.concat([3, -5, -z]);
	}
	arr = arr.concat([0, -5, -3]);
	arr = arr.concat([0, -5, 3]);
	arr = arr.concat([-3, -5, 0]);
	arr = arr.concat([3, -5, 0]);
	help[0] = arr;
	//top
	arr = new Array();
	for (var x=-3; x<0; x++) {
		arr = arr.concat([x, 5, -3]);
		arr = arr.concat([x, 5, 3]);
		arr = arr.concat([-x, 5, -3]);
		arr = arr.concat([-x, 5, 3]);
	}
	for (var z=-3; z<0; z++) {
		arr = arr.concat([-3, 5, z]);
		arr = arr.concat([3, 5, z]);
		arr = arr.concat([-3, 5, -z]);
		arr = arr.concat([3, 5, -z]);
	}
	arr = arr.concat([0, 5, -3]);
	arr = arr.concat([0, 5, 3]);
	arr = arr.concat([-3, 5, 0]);
	arr = arr.concat([3, 5, 0]);
	help[1] = arr;
	//front
	arr = new Array();
	for (var x=-3; x<0; x++) {
		arr = arr.concat([x, -5, 3]);
		arr = arr.concat([x, 5, 3]);
		arr = arr.concat([-x, -5, 3]);
		arr = arr.concat([-x, 5, 3]);
	}
	for (var y=-5; y<0; y++) {
		arr = arr.concat([-3, y, 3]);
		arr = arr.concat([3, y, 3]);
		arr = arr.concat([-3, -y, 3]);
		arr = arr.concat([3, -y, 3]);
	}
	arr = arr.concat([0, -5, 3]);
	arr = arr.concat([0, 5, 3]);
	arr = arr.concat([-3, 0, 3]);
	arr = arr.concat([3, 0, 3]);
	help[2] = arr;
	//back
	arr = new Array();
	for (var x=-3; x<0; x++) {
		arr = arr.concat([x, -5, -3]);
		arr = arr.concat([x, 5, -3]);
		arr = arr.concat([-x, -5, -3]);
		arr = arr.concat([-x, 5, -3]);
	}
	for (var y=-5; y<0; y++) {
		arr = arr.concat([-3, y, -3]);
		arr = arr.concat([3, y, -3]);
		arr = arr.concat([-3, -y, -3]);
		arr = arr.concat([3, -y, -3]);
	}
	arr = arr.concat([0, -5, -3]);
	arr = arr.concat([0, 5, -3]);
	arr = arr.concat([-3, 0, -3]);
	arr = arr.concat([3, 0, -3]);
	help[3] = arr;
	//right
	arr = new Array();
	for (var z=-3; z<0; z++) {
		arr = arr.concat([3, -5, z]);
		arr = arr.concat([3, 5, z]);
		arr = arr.concat([3, -5, -z]);
		arr = arr.concat([3, 5, -z]);
	}
	for (var y=-5; y<0; y++) {
		arr = arr.concat([3, y, -3]);
		arr = arr.concat([3, y, 3]);
		arr = arr.concat([3, -y, -3]);
		arr = arr.concat([3, -y, 3]);
	}
	arr = arr.concat([3, -5, 0]);
	arr = arr.concat([3, 5, 0]);
	arr = arr.concat([3, 0, -3]);
	arr = arr.concat([3, 0, 3]);
	help[4] = arr;
	//left
	arr = new Array();
	for (var z=-3; z<0; z++) {
		arr = arr.concat([-3, -5, z]);
		arr = arr.concat([-3, 5, z]);
		arr = arr.concat([-3, -5, -z]);
		arr = arr.concat([-3, 5, -z]);
	}
	for (var y=-5; y<0; y++) {
		arr = arr.concat([-3, y, -3]);
		arr = arr.concat([-3, y, 3]);
		arr = arr.concat([-3, -y, -3]);
		arr = arr.concat([-3, -y, 3]);
	}
	arr = arr.concat([-3, -5, 0]);
	arr = arr.concat([-3, 5, 0]);
	arr = arr.concat([-3, 0, -3]);
	arr = arr.concat([-3, 0, 3]);
	help[5] = arr;
	return help;
}

function getVert(shape) {
	switch (shape) {
	case 1 :
		//1 I
		 return [
			//1
			 //front
			-2, 0, 0,
			-1, 0, 0,
			-2, 1, 0,
			-1, 0, 0,
			-2, 1, 0,
			-1, 1, 0,
			//bottom
			-2, 0, 0,
			-1, 0, 0,
			-2, 0, -1,
			-1, 0, 0,
			-2, 0, -1,
			-1, 0, -1,
			//left
			-2, 0, 0,
			-2, 0, -1,
			-2, 1, 0,
			-2, 0, -1,
			-2, 1, 0,
			-2, 1, -1,
			//right
			-1, 0, 0,
			-1, 0, -1,
			-1, 1, 0,
			-1, 0, -1,
			-1, 1, 0,
			-1, 1, -1,
			//back
			-2, 0, -1,
			-1, 0, -1,
			-2, 1, -1,
			-1, 0, -1,
			-2, 1, -1,
			-1, 1, -1,
			//top
			-2, 1, 0,
			-1, 1, 0,
			-2, 1, -1,
			-1, 1, 0,
			-2, 1, -1,
			-1, 1, -1,
			//2
			-1, 0, 0,
			0, 0, 0,
			-1, 1, 0,
			0, 0, 0,
			-1, 1, 0,
			0, 1, 0,
			
			-1, 0, 0,
			0, 0, 0,
			-1, 0, -1,
			0, 0, 0,
			-1, 0, -1,
			0, 0, -1,
			
			-1, 0, 0,
			-1, 0, -1,
			-1, 1, 0,
			-1, 0, -1,
			-1, 1, 0,
			-1, 1, -1,
			
			0, 0, 0,
			0, 0, -1,
			0, 1, 0,
			0, 0, -1,
			0, 1, 0,
			0, 1, -1,
			
			-1, 0, -1,
			0, 0, -1,
			-1, 1, -1,
			0, 0, -1,
			-1, 1, -1,
			0, 1, -1,
			
			-1, 1, 0,
			0, 1, 0,
			-1, 1, -1,
			0, 1, 0,
			-1, 1, -1,
			0, 1, -1,
			//3
			0, 0, 0,
			1, 0, 0,
			0, 1, 0,
			1, 0, 0,
			0, 1, 0,
			1, 1, 0,
			
			0, 0, 0,
			1, 0, 0,
			0, 0, -1,
			1, 0, 0,
			0, 0, -1,
			1, 0, -1,
			
			0, 0, 0,
			0, 0, -1,
			0, 1, 0,
			0, 0, -1,
			0, 1, 0,
			0, 1, -1,
			
			1, 0, 0,
			1, 0, -1,
			1, 1, 0,
			1, 0, -1,
			1, 1, 0,
			1, 1, -1,
			
			0, 0, -1,
			1, 0, -1,
			0, 1, -1,
			1, 0, -1,
			0, 1, -1,
			1, 1, -1,
			
			0, 1, 0,
			1, 1, 0,
			0, 1, -1,
			1, 1, 0,
			0, 1, -1,
			1, 1, -1,
			//4
			1, 0, 0,
			2, 0, 0,
			1, 1, 0,
			2, 0, 0,
			1, 1, 0,
			2, 1, 0,
			
			1, 0, 0,
			2, 0, 0,
			1, 0, -1,
			2, 0, 0,
			1, 0, -1,
			2, 0, -1,
			
			1, 0, 0,
			1, 0, -1,
			1, 1, 0,
			1, 0, -1,
			1, 1, 0,
			1, 1, -1,
			
			2, 0, 0,
			2, 0, -1,
			2, 1, 0,
			2, 0, -1,
			2, 1, 0,
			2, 1, -1,
			
			1, 0, -1,
			2, 0, -1,
			1, 1, -1,
			2, 0, -1,
			1, 1, -1,
			2, 1, -1,
			
			1, 1, 0,
			2, 1, 0,
			1, 1, -1,
			2, 1, 0,
			1, 1, -1,
			2, 1, -1
		]
	case 2 :
		//2 O
		  return [
			//1
			-1, 0, 0,
			0, 0, 0,
			-1, 1, 0,
			0, 0, 0,
			-1, 1, 0,
			0, 1, 0,
			
			-1, 0, 0,
			0, 0, 0,
			-1, 0, -1,
			0, 0, 0,
			-1, 0, -1,
			0, 0, -1,
			
			-1, 0, 0,
			-1, 0, -1,
			-1, 1, 0,
			-1, 0, -1,
			-1, 1, 0,
			-1, 1, -1,
			
			0, 0, 0,
			0, 0, -1,
			0, 1, 0,
			0, 0, -1,
			0, 1, 0,
			0, 1, -1,
			
			-1, 0, -1,
			0, 0, -1,
			-1, 1, -1,
			0, 0, -1,
			-1, 1, -1,
			0, 1, -1,
			
			-1, 1, 0,
			0, 1, 0,
			-1, 1, -1,
			0, 1, 0,
			-1, 1, -1,
			0, 1, -1,
			//2
			0, 0, 0,
			1, 0, 0,
			0, 1, 0,
			1, 0, 0,
			0, 1, 0,
			1, 1, 0,
			
			0, 0, 0,
			1, 0, 0,
			0, 0, -1,
			1, 0, 0,
			0, 0, -1,
			1, 0, -1,
			
			0, 0, 0,
			0, 0, -1,
			0, 1, 0,
			0, 0, -1,
			0, 1, 0,
			0, 1, -1,
			
			1, 0, 0,
			1, 0, -1,
			1, 1, 0,
			1, 0, -1,
			1, 1, 0,
			1, 1, -1,
			
			0, 0, -1,
			1, 0, -1,
			0, 1, -1,
			1, 0, -1,
			0, 1, -1,
			1, 1, -1,
			
			0, 1, 0,
			1, 1, 0,
			0, 1, -1,
			1, 1, 0,
			0, 1, -1,
			1, 1, -1,
			//3
			-1, -1, 0,
			0, -1, 0,
			-1, 0, 0,
			0, -1, 0,
			-1, 0, 0,
			0, 0, 0,
			
			-1, -1, 0,
			0, -1, 0,
			-1, -1, -1,
			0, -1, 0,
			-1, -1, -1,
			0, -1, -1,
			
			-1, -1, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, 0, -1,
			
			0, -1, 0,
			0, -1, -1,
			0, 0, 0,
			0, -1, -1,
			0, 0, 0,
			0, 0, -1,
			
			-1, -1, -1,
			0, -1, -1,
			-1, 0, -1,
			0, -1, -1,
			-1, 0, -1,
			0, 0, -1,
			
			-1, 0, 0,
			0, 0, 0,
			-1, 0, -1,
			0, 0, 0,
			-1, 0, -1,
			0, 0, -1,
			//4
			0, -1, 0,
			1, -1, 0,
			0, 0, 0,
			1, -1, 0,
			0, 0, 0,
			1, 0, 0,
			
			0, -1, 0,
			1, -1, 0,
			0, -1, -1,
			1, -1, 0,
			0, -1, -1,
			1, -1, -1,
			
			0, -1, 0,
			0, -1, -1,
			0, 0, 0,
			0, -1, -1,
			0, 0, 0,
			0, 0, -1,
			
			1, -1, 0,
			1, -1, -1,
			1, 0, 0,
			1, -1, -1,
			1, 0, 0,
			1, 0, -1,
			
			0, -1, -1,
			1, -1, -1,
			0, 0, -1,
			1, -1, -1,
			0, 0, -1,
			1, 0, -1,
			
			0, 0, 0,
			1, 0, 0,
			0, 0, -1,
			1, 0, 0,
			0, 0, -1,
			1, 0, -1,
		]
	case 3 :
		//3 L
		return [
			//1
			-2, -1, 0,
			-1, -1, 0,
			-2, 0, 0,
			-1, -1, 0,
			-2, 0, 0,
			-1, 0, 0,
			
			-2, -1, 0,
			-1, -1, 0,
			-2, -1, -1,
			-1, -1, 0,
			-2, -1, -1,
			-1, -1, -1,
			
			-2, -1, 0,
			-2, -1, -1,
			-2, 0, 0,
			-2, -1, -1,
			-2, 0, 0,
			-2, 0, -1,
			
			-1, -1, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, 0, -1,
			
			-2, -1, -1,
			-1, -1, -1,
			-2, 0, -1,
			-1, -1, -1,
			-2, 0, -1,
			-1, 0, -1,
			
			-2, 0, 0,
			-1, 0, 0,
			-2, 0, -1,
			-1, 0, 0,
			-2, 0, -1,
			-1, 0, -1,
			//2
			-1, -1, 0,
			0, -1, 0,
			-1, 0, 0,
			0, -1, 0,
			-1, 0, 0,
			0, 0, 0,
			
			-1, -1, 0,
			0, -1, 0,
			-1, -1, -1,
			0, -1, 0,
			-1, -1, -1,
			0, -1, -1,
			
			-1, -1, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, 0, -1,
			
			0, -1, 0,
			0, -1, -1,
			0, 0, 0,
			0, -1, -1,
			0, 0, 0,
			0, 0, -1,
			
			-1, -1, -1,
			0, -1, -1,
			-1, 0, -1,
			0, -1, -1,
			-1, 0, -1,
			0, 0, -1,
			
			-1, 0, 0,
			0, 0, 0,
			-1, 0, -1,
			0, 0, 0,
			-1, 0, -1,
			0, 0, -1,
			//3
			0, -1, 0,
			1, -1, 0,
			0, 0, 0,
			1, -1, 0,
			0, 0, 0,
			1, 0, 0,
			
			0, -1, 0,
			1, -1, 0,
			0, -1, -1,
			1, -1, 0,
			0, -1, -1,
			1, -1, -1,
			
			0, -1, 0,
			0, -1, -1,
			0, 0, 0,
			0, -1, -1,
			0, 0, 0,
			0, 0, -1,
			
			1, -1, 0,
			1, -1, -1,
			1, 0, 0,
			1, -1, -1,
			1, 0, 0,
			1, 0, -1,
			
			0, -1, -1,
			1, -1, -1,
			0, 0, -1,
			1, -1, -1,
			0, 0, -1,
			1, 0, -1,
			
			0, 0, 0,
			1, 0, 0,
			0, 0, -1,
			1, 0, 0,
			0, 0, -1,
			1, 0, -1,
			//4
			0, 0, 0,
			1, 0, 0,
			0, 1, 0,
			1, 0, 0,
			0, 1, 0,
			1, 1, 0,
			
			0, 0, 0,
			1, 0, 0,
			0, 0, -1,
			1, 0, 0,
			0, 0, -1,
			1, 0, -1,
			
			0, 0, 0,
			0, 0, -1,
			0, 1, 0,
			0, 0, -1,
			0, 1, 0,
			0, 1, -1,
			
			1, 0, 0,
			1, 0, -1,
			1, 1, 0,
			1, 0, -1,
			1, 1, 0,
			1, 1, -1,
			
			0, 0, -1,
			1, 0, -1,
			0, 1, -1,
			1, 0, -1,
			0, 1, -1,
			1, 1, -1,
			
			0, 1, 0,
			1, 1, 0,
			0, 1, -1,
			1, 1, 0,
			0, 1, -1,
			1, 1, -1,
		]
	case 4 :
		//4 T
		return [
			//1
			-2, -1, 0,
			-1, -1, 0,
			-2, 0, 0,
			-1, -1, 0,
			-2, 0, 0,
			-1, 0, 0,
			
			-2, -1, 0,
			-1, -1, 0,
			-2, -1, -1,
			-1, -1, 0,
			-2, -1, -1,
			-1, -1, -1,
			
			-2, -1, 0,
			-2, -1, -1,
			-2, 0, 0,
			-2, -1, -1,
			-2, 0, 0,
			-2, 0, -1,
			
			-1, -1, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, 0, -1,
			
			-2, -1, -1,
			-1, -1, -1,
			-2, 0, -1,
			-1, -1, -1,
			-2, 0, -1,
			-1, 0, -1,
			
			-2, 0, 0,
			-1, 0, 0,
			-2, 0, -1,
			-1, 0, 0,
			-2, 0, -1,
			-1, 0, -1,
			//2
			-1, -1, 0,
			0, -1, 0,
			-1, 0, 0,
			0, -1, 0,
			-1, 0, 0,
			0, 0, 0,
			
			-1, -1, 0,
			0, -1, 0,
			-1, -1, -1,
			0, -1, 0,
			-1, -1, -1,
			0, -1, -1,
			
			-1, -1, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, 0, -1,
			
			0, -1, 0,
			0, -1, -1,
			0, 0, 0,
			0, -1, -1,
			0, 0, 0,
			0, 0, -1,
			
			-1, -1, -1,
			0, -1, -1,
			-1, 0, -1,
			0, -1, -1,
			-1, 0, -1,
			0, 0, -1,
			
			-1, 0, 0,
			0, 0, 0,
			-1, 0, -1,
			0, 0, 0,
			-1, 0, -1,
			0, 0, -1,
			//3
			0, -1, 0,
			1, -1, 0,
			0, 0, 0,
			1, -1, 0,
			0, 0, 0,
			1, 0, 0,
			
			0, -1, 0,
			1, -1, 0,
			0, -1, -1,
			1, -1, 0,
			0, -1, -1,
			1, -1, -1,
			
			0, -1, 0,
			0, -1, -1,
			0, 0, 0,
			0, -1, -1,
			0, 0, 0,
			0, 0, -1,
			
			1, -1, 0,
			1, -1, -1,
			1, 0, 0,
			1, -1, -1,
			1, 0, 0,
			1, 0, -1,
			
			0, -1, -1,
			1, -1, -1,
			0, 0, -1,
			1, -1, -1,
			0, 0, -1,
			1, 0, -1,
			
			0, 0, 0,
			1, 0, 0,
			0, 0, -1,
			1, 0, 0,
			0, 0, -1,
			1, 0, -1,
			//4
			-1, 0, 0,
			0, 0, 0,
			-1, 1, 0,
			0, 0, 0,
			-1, 1, 0,
			0, 1, 0,
			
			-1, 0, 0,
			0, 0, 0,
			-1, 0, -1,
			0, 0, 0,
			-1, 0, -1,
			0, 0, -1,
			
			-1, 0, 0,
			-1, 0, -1,
			-1, 1, 0,
			-1, 0, -1,
			-1, 1, 0,
			-1, 1, -1,
			
			0, 0, 0,
			0, 0, -1,
			0, 1, 0,
			0, 0, -1,
			0, 1, 0,
			0, 1, -1,
			
			-1, 0, -1,
			0, 0, -1,
			-1, 1, -1,
			0, 0, -1,
			-1, 1, -1,
			0, 1, -1,
			
			-1, 1, 0,
			0, 1, 0,
			-1, 1, -1,
			0, 1, 0,
			-1, 1, -1,
			0, 1, -1,
		]
	case 5 :
		//5 Z
		return [
			//1
			-2, -1, 0,
			-1, -1, 0,
			-2, 0, 0,
			-1, -1, 0,
			-2, 0, 0,
			-1, 0, 0,
			
			-2, -1, 0,
			-1, -1, 0,
			-2, -1, -1,
			-1, -1, 0,
			-2, -1, -1,
			-1, -1, -1,
			
			-2, -1, 0,
			-2, -1, -1,
			-2, 0, 0,
			-2, -1, -1,
			-2, 0, 0,
			-2, 0, -1,
			
			-1, -1, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, 0, -1,
			
			-2, -1, -1,
			-1, -1, -1,
			-2, 0, -1,
			-1, -1, -1,
			-2, 0, -1,
			-1, 0, -1,
			
			-2, 0, 0,
			-1, 0, 0,
			-2, 0, -1,
			-1, 0, 0,
			-2, 0, -1,
			-1, 0, -1,
			//2
			-1, -1, 0,
			0, -1, 0,
			-1, 0, 0,
			0, -1, 0,
			-1, 0, 0,
			0, 0, 0,
			
			-1, -1, 0,
			0, -1, 0,
			-1, -1, -1,
			0, -1, 0,
			-1, -1, -1,
			0, -1, -1,
			
			-1, -1, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, 0, -1,
			
			0, -1, 0,
			0, -1, -1,
			0, 0, 0,
			0, -1, -1,
			0, 0, 0,
			0, 0, -1,
			
			-1, -1, -1,
			0, -1, -1,
			-1, 0, -1,
			0, -1, -1,
			-1, 0, -1,
			0, 0, -1,
			
			-1, 0, 0,
			0, 0, 0,
			-1, 0, -1,
			0, 0, 0,
			-1, 0, -1,
			0, 0, -1,
			//3
			-1, 0, 0,
			0, 0, 0,
			-1, 1, 0,
			0, 0, 0,
			-1, 1, 0,
			0, 1, 0,
			
			-1, 0, 0,
			0, 0, 0,
			-1, 0, -1,
			0, 0, 0,
			-1, 0, -1,
			0, 0, -1,
			
			-1, 0, 0,
			-1, 0, -1,
			-1, 1, 0,
			-1, 0, -1,
			-1, 1, 0,
			-1, 1, -1,
			
			0, 0, 0,
			0, 0, -1,
			0, 1, 0,
			0, 0, -1,
			0, 1, 0,
			0, 1, -1,
			
			-1, 0, -1,
			0, 0, -1,
			-1, 1, -1,
			0, 0, -1,
			-1, 1, -1,
			0, 1, -1,
			
			-1, 1, 0,
			0, 1, 0,
			-1, 1, -1,
			0, 1, 0,
			-1, 1, -1,
			0, 1, -1,
			//4
			0, 0, 0,
			1, 0, 0,
			0, 1, 0,
			1, 0, 0,
			0, 1, 0,
			1, 1, 0,
			
			0, 0, 0,
			1, 0, 0,
			0, 0, -1,
			1, 0, 0,
			0, 0, -1,
			1, 0, -1,
			
			0, 0, 0,
			0, 0, -1,
			0, 1, 0,
			0, 0, -1,
			0, 1, 0,
			0, 1, -1,
			
			1, 0, 0,
			1, 0, -1,
			1, 1, 0,
			1, 0, -1,
			1, 1, 0,
			1, 1, -1,
			
			0, 0, -1,
			1, 0, -1,
			0, 1, -1,
			1, 0, -1,
			0, 1, -1,
			1, 1, -1,
			
			0, 1, 0,
			1, 1, 0,
			0, 1, -1,
			1, 1, 0,
			0, 1, -1,
			1, 1, -1,
		]
	case 6 :
		//6 tower right
		return [
			//1
			0, 0, 0,
			1, 0, 0,
			0, 1, 0,
			1, 0, 0,
			0, 1, 0,
			1, 1, 0,
			
			0, 0, 0,
			1, 0, 0,
			0, 0, -1,
			1, 0, 0,
			0, 0, -1,
			1, 0, -1,
			
			0, 0, 0,
			0, 0, -1,
			0, 1, 0,
			0, 0, -1,
			0, 1, 0,
			0, 1, -1,
			
			1, 0, 0,
			1, 0, -1,
			1, 1, 0,
			1, 0, -1,
			1, 1, 0,
			1, 1, -1,
			
			0, 0, -1,
			1, 0, -1,
			0, 1, -1,
			1, 0, -1,
			0, 1, -1,
			1, 1, -1,
			
			0, 1, 0,
			1, 1, 0,
			0, 1, -1,
			1, 1, 0,
			0, 1, -1,
			1, 1, -1,
			//2
			0, -1, 0,
			1, -1, 0,
			0, 0, 0,
			1, -1, 0,
			0, 0, 0,
			1, 0, 0,
			
			0, -1, 0,
			1, -1, 0,
			0, -1, -1,
			1, -1, 0,
			0, -1, -1,
			1, -1, -1,
			
			0, -1, 0,
			0, -1, -1,
			0, 0, 0,
			0, -1, -1,
			0, 0, 0,
			0, 0, -1,
			
			1, -1, 0,
			1, -1, -1,
			1, 0, 0,
			1, -1, -1,
			1, 0, 0,
			1, 0, -1,
			
			0, -1, -1,
			1, -1, -1,
			0, 0, -1,
			1, -1, -1,
			0, 0, -1,
			1, 0, -1,
			
			0, 0, 0,
			1, 0, 0,
			0, 0, -1,
			1, 0, 0,
			0, 0, -1,
			1, 0, -1,
			//3
			-1, -1, 1,
			0, -1, 1,
			-1, 0, 1,
			0, -1, 1,
			-1, 0, 1,
			0, 0, 1,
			
			-1, -1, 1,
			0, -1, 1,
			-1, -1, 0,
			0, -1, 1,
			-1, -1, 0,
			0, -1, 0,
			
			-1, -1, 1,
			-1, -1, 0,
			-1, 0, 1,
			-1, -1, 0,
			-1, 0, 1,
			-1, 0, 0,
			
			0, -1, 1,
			0, -1, 0,
			0, 0, 1,
			0, -1, 0,
			0, 0, 1,
			0, 0, 0,
			
			-1, -1, 0,
			0, -1, 0,
			-1, 0, 0,
			0, -1, 0,
			-1, 0, 0,
			0, 0, 0,
			
			-1, 0, 1,
			0, 0, 1,
			-1, 0, 0,
			0, 0, 1,
			-1, 0, 0,
			0, 0, 0,
			//4
			0, -1, 1,
			1, -1, 1,
			0, 0, 1,
			1, -1, 1,
			0, 0, 1,
			1, 0, 1,
			
			0, -1, 1,
			1, -1, 1,
			0, -1, 0,
			1, -1, 1,
			0, -1, 0,
			1, -1, 0,
			
			0, -1, 1,
			0, -1, 0,
			0, 0, 1,
			0, -1, 0,
			0, 0, 1,
			0, 0, 0,
			
			1, -1, 1,
			1, -1, 0,
			1, 0, 1,
			1, -1, 0,
			1, 0, 1,
			1, 0, 0,
			
			0, -1, 0,
			1, -1, 0,
			0, 0, 0,
			1, -1, 0,
			0, 0, 0,
			1, 0, 0,
			
			0, 0, 1,
			1, 0, 1,
			0, 0, 0,
			1, 0, 1,
			0, 0, 0,
			1, 0, 0,
		]
	case 7 :
		//7 tower left
		return [
			//1
			-1, 0, 0,
			0, 0, 0,
			-1, 1, 0,
			0, 0, 0,
			-1, 1, 0,
			0, 1, 0,
			
			-1, 0, 0,
			0, 0, 0,
			-1, 0, -1,
			0, 0, 0,
			-1, 0, -1,
			0, 0, -1,
			
			-1, 0, 0,
			-1, 0, -1,
			-1, 1, 0,
			-1, 0, -1,
			-1, 1, 0,
			-1, 1, -1,
			
			0, 0, 0,
			0, 0, -1,
			0, 1, 0,
			0, 0, -1,
			0, 1, 0,
			0, 1, -1,
			
			-1, 0, -1,
			0, 0, -1,
			-1, 1, -1,
			0, 0, -1,
			-1, 1, -1,
			0, 1, -1,
			
			-1, 1, 0,
			0, 1, 0,
			-1, 1, -1,
			0, 1, 0,
			-1, 1, -1,
			0, 1, -1,
			//2
			-1, -1, 0,
			0, -1, 0,
			-1, 0, 0,
			0, -1, 0,
			-1, 0, 0,
			0, 0, 0,
			
			-1, -1, 0,
			0, -1, 0,
			-1, -1, -1,
			0, -1, 0,
			-1, -1, -1,
			0, -1, -1,
			
			-1, -1, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, 0, -1,
			
			0, -1, 0,
			0, -1, -1,
			0, 0, 0,
			0, -1, -1,
			0, 0, 0,
			0, 0, -1,
			
			-1, -1, -1,
			0, -1, -1,
			-1, 0, -1,
			0, -1, -1,
			-1, 0, -1,
			0, 0, -1,
			
			-1, 0, 0,
			0, 0, 0,
			-1, 0, -1,
			0, 0, 0,
			-1, 0, -1,
			0, 0, -1,
			//3
			-1, -1, 1,
			0, -1, 1,
			-1, 0, 1,
			0, -1, 1,
			-1, 0, 1,
			0, 0, 1,
			
			-1, -1, 1,
			0, -1, 1,
			-1, -1, 0,
			0, -1, 1,
			-1, -1, 0,
			0, -1, 0,
			
			-1, -1, 1,
			-1, -1, 0,
			-1, 0, 1,
			-1, -1, 0,
			-1, 0, 1,
			-1, 0, 0,
			
			0, -1, 1,
			0, -1, 0,
			0, 0, 1,
			0, -1, 0,
			0, 0, 1,
			0, 0, 0,
			
			-1, -1, 0,
			0, -1, 0,
			-1, 0, 0,
			0, -1, 0,
			-1, 0, 0,
			0, 0, 0,
			
			-1, 0, 1,
			0, 0, 1,
			-1, 0, 0,
			0, 0, 1,
			-1, 0, 0,
			0, 0, 0,
			//4
			0, -1, 1,
			1, -1, 1,
			0, 0, 1,
			1, -1, 1,
			0, 0, 1,
			1, 0, 1,
			
			0, -1, 1,
			1, -1, 1,
			0, -1, 0,
			1, -1, 1,
			0, -1, 0,
			1, -1, 0,
			
			0, -1, 1,
			0, -1, 0,
			0, 0, 1,
			0, -1, 0,
			0, 0, 1,
			0, 0, 0,
			
			1, -1, 1,
			1, -1, 0,
			1, 0, 1,
			1, -1, 0,
			1, 0, 1,
			1, 0, 0,
			
			0, -1, 0,
			1, -1, 0,
			0, 0, 0,
			1, -1, 0,
			0, 0, 0,
			1, 0, 0,
			
			0, 0, 1,
			1, 0, 1,
			0, 0, 0,
			1, 0, 1,
			0, 0, 0,
			1, 0, 0,
		]
	case 8 :
		//8 tripod
		return [
			//1
			0, 0, 0,
			1, 0, 0,
			0, 1, 0,
			1, 0, 0,
			0, 1, 0,
			1, 1, 0,
			
			0, 0, 0,
			1, 0, 0,
			0, 0, -1,
			1, 0, 0,
			0, 0, -1,
			1, 0, -1,
			
			0, 0, 0,
			0, 0, -1,
			0, 1, 0,
			0, 0, -1,
			0, 1, 0,
			0, 1, -1,
			
			1, 0, 0,
			1, 0, -1,
			1, 1, 0,
			1, 0, -1,
			1, 1, 0,
			1, 1, -1,
			
			0, 0, -1,
			1, 0, -1,
			0, 1, -1,
			1, 0, -1,
			0, 1, -1,
			1, 1, -1,
			
			0, 1, 0,
			1, 1, 0,
			0, 1, -1,
			1, 1, 0,
			0, 1, -1,
			1, 1, -1,
			//2
			0, -1, 0,
			1, -1, 0,
			0, 0, 0,
			1, -1, 0,
			0, 0, 0,
			1, 0, 0,
			
			0, -1, 0,
			1, -1, 0,
			0, -1, -1,
			1, -1, 0,
			0, -1, -1,
			1, -1, -1,
			
			0, -1, 0,
			0, -1, -1,
			0, 0, 0,
			0, -1, -1,
			0, 0, 0,
			0, 0, -1,
			
			1, -1, 0,
			1, -1, -1,
			1, 0, 0,
			1, -1, -1,
			1, 0, 0,
			1, 0, -1,
			
			0, -1, -1,
			1, -1, -1,
			0, 0, -1,
			1, -1, -1,
			0, 0, -1,
			1, 0, -1,
			
			0, 0, 0,
			1, 0, 0,
			0, 0, -1,
			1, 0, 0,
			0, 0, -1,
			1, 0, -1,
			//3
			-1, -1, 0,
			0, -1, 0,
			-1, 0, 0,
			0, -1, 0,
			-1, 0, 0,
			0, 0, 0,
			
			-1, -1, 0,
			0, -1, 0,
			-1, -1, -1,
			0, -1, 0,
			-1, -1, -1,
			0, -1, -1,
			
			-1, -1, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, -1, -1,
			-1, 0, 0,
			-1, 0, -1,
			
			0, -1, 0,
			0, -1, -1,
			0, 0, 0,
			0, -1, -1,
			0, 0, 0,
			0, 0, -1,
			
			-1, -1, -1,
			0, -1, -1,
			-1, 0, -1,
			0, -1, -1,
			-1, 0, -1,
			0, 0, -1,
			
			-1, 0, 0,
			0, 0, 0,
			-1, 0, -1,
			0, 0, 0,
			-1, 0, -1,
			0, 0, -1,
			//4
			0, -1, 1,
			1, -1, 1,
			0, 0, 1,
			1, -1, 1,
			0, 0, 1,
			1, 0, 1,
			
			0, -1, 1,
			1, -1, 1,
			0, -1, 0,
			1, -1, 1,
			0, -1, 0,
			1, -1, 0,
			
			0, -1, 1,
			0, -1, 0,
			0, 0, 1,
			0, -1, 0,
			0, 0, 1,
			0, 0, 0,
			
			1, -1, 1,
			1, -1, 0,
			1, 0, 1,
			1, -1, 0,
			1, 0, 1,
			1, 0, 0,
			
			0, -1, 0,
			1, -1, 0,
			0, 0, 0,
			1, -1, 0,
			0, 0, 0,
			1, 0, 0,
			
			0, 0, 1,
			1, 0, 1,
			0, 0, 0,
			1, 0, 1,
			0, 0, 0,
			1, 0, 0,
		]
	}
}

function getColor() {
	var col = new Array();
	var a = [Math.random(), Math.random(), Math.random()];
	for (var i=0; i<648;) {
		col[i++] = a[0];
		col[i++] = a[1];
		col[i++] = a[2];
	}
	return col;
}

function getNormals() {
	var norm = new Array();
	for (var i=0; i<6; i++)
		norm = norm.concat([

			-1, -1, 1,
			1, -1, 1,
			-1, 1, 1,
			1, -1, 1,
			-1, 1, 1,
			1, 1, 1,

			-1, -1, 1,
			1, -1, 1,
			-1, -1, -1,
			1, -1, 1,
			-1, -1, -1,
			1, -1, -1,

			-1, -1, 1,
			-1, -1, -1,
			-1, 1, 1,
			-1, -1, -1,
			-1, 1, 1,
			-1, 1, -1,

			1, -1, 1,
			1, -1, -1,
			1, 1, 1,
			1, -1, -1,
			1, 1, 1,
			1, 1, -1,

			-1, -1, -1,
			1, -1, -1,
			-1, 1, -1,
			1, -1, -1,
			-1, 1, -1,
			1, 1, -1,

			-1, 1, 1,
			1, 1, 1,
			-1, 1, -1,
			1, 1, 1,
			-1, 1, -1,
			1, 1, -1,
		]);
	return norm;
	
	/*
	 		0, 0, 1,
			0, 0, 1,
			0, 0, 1,
			0, 0, 1,
			0, 0, 1,
			0, 0, 1,
			
			0, -1, 0,
			0, -1, 0,
			0, -1, 0,
			0, -1, 0,
			0, -1, 0,
			0, -1, 0,
			
			-1, 0, 0,
			-1, 0, 0,
			-1, 0, 0,
			-1, 0, 0,
			-1, 0, 0,
			-1, 0, 0,
			
			1, 0, 0,
			1, 0, 0,
			1, 0, 0,
			1, 0, 0,
			1, 0, 0,
			1, 0, 0,
			
			0, 0, -1,
			0, 0, -1,
			0, 0, -1,
			0, 0, -1,
			0, 0, -1,
			0, 0, -1,
			
			0, 1, 0,
			0, 1, 0,
			0, 1, 0,
			0, 1, 0,
			0, 1, 0,
			0, 1, 0,
	 */
}

function shapeArray(shape) {
	var help = new Array();
	for (var x=0; x<4; x++) {
		help[x] = [];
		for (var y=0; y<4; y++) {
			help[x][y] = [];
			for (var z=0; z<4; z++)
				help[x][y][z] = 0;
		}
	}
	switch (shape) {
	case 1 : //I
		help[0][1][2] = 1;
		help[1][1][2] = 1;
		help[2][1][2] = 1;
		help[3][1][2] = 1;
		break;
	case 2 : //O
		help[1][1][2] = 1;
		help[1][2][2] = 1;
		help[2][1][2] = 1;
		help[2][2][2] = 1;
		break;
	case 3 : //L
		help[1][1][2] = 1;
		help[1][2][2] = 1;
		help[2][2][2] = 1;
		help[3][2][2] = 1;
		break;
	case 4 : //T
		help[1][2][2] = 1;
		help[2][2][2] = 1;
		help[2][1][2] = 1;
		help[3][2][2] = 1;
		break;
	case 5 : //Z
		help[1][1][2] = 1;
		help[2][1][2] = 1;
		help[2][2][2] = 1;
		help[3][2][2] = 1;
		break;
	case 6 : //right tower
		help[1][1][2] = 1;
		help[1][2][2] = 1;
		help[1][2][1] = 1;
		help[2][2][1] = 1;
		break;
	case 7 : //left tower
		help[2][1][2] = 1;
		help[2][2][2] = 1;
		help[2][2][1] = 1;
		help[1][2][1] = 1;
		break;
	case 8 : //tripod
		help[1][1][2] = 1;
		help[1][2][2] = 1;
		help[1][2][1] = 1;
		help[2][2][2] = 1;
		break;
	}
	return help;
}

function fieldArray() {
	
}

function blockVert(pos) {
	var a = [
		0, 0, 0,
		1, 0, 0,
		0, 1, 0,
		1, 0, 0,
		0, 1, 0,
		1, 1, 0,
		
		0, 0, 0,
		1, 0, 0,
		0, 0, -1,
		1, 0, 0,
		0, 0, -1,
		1, 0, -1,
		
		0, 0, 0,
		0, 0, -1,
		0, 1, 0,
		0, 0, -1,
		0, 1, 0,
		0, 1, -1,
		
		1, 0, 0,
		1, 0, -1,
		1, 1, 0,
		1, 0, -1,
		1, 1, 0,
		1, 1, -1,
		
		0, 0, -1,
		1, 0, -1,
		0, 1, -1,
		1, 0, -1,
		0, 1, -1,
		1, 1, -1,
		
		0, 1, 0,
		1, 1, 0,
		0, 1, -1,
		1, 1, 0,
		0, 1, -1,
		1, 1, -1,
	]
	for (var i=0; i<108;) {
		a[i++] += 2-pos[0];
		a[i++] += 6-pos[1];
		a[i++] += 3-pos[2];
	}
	return a;
}

function blockNormals() {
	return [
		//front
		-1, -1, 1,
		1, -1, 1,
		-1, 1, 1,
		1, -1, 1,
		-1, 1, 1,
		1, 1, 1,
		//bottom
		-1, -1, 1,
		1, -1, 1,
		-1, -1, -1,
		1, -1, 1,
		-1, -1, -1,
		1, -1, -1,
		//left
		-1, -1, 1,
		-1, -1, -1,
		-1, 1, 1,
		-1, -1, -1,
		-1, 1, 1,
		-1, 1, -1,
		//right
		1, -1, 1,
		1, -1, -1,
		1, 1, 1,
		1, -1, -1,
		1, 1, 1,
		1, 1, -1,
		//back
		-1, -1, -1,
		1, -1, -1,
		-1, 1, -1,
		1, -1, -1,
		-1, 1, -1,
		1, 1, -1,
		//top
		-1, 1, 1,
		1, 1, 1,
		-1, 1, -1,
		1, 1, 1,
		-1, 1, -1,
		1, 1, -1,
	]
}

function colorsArray(color) {
	var c = new Array();
	for (var i=0; i<108;) {
		c[i++] = color[0];
		c[i++] = color[1];
		c[i++] = color[2];
	}
	return c;
}